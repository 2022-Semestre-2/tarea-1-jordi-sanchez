/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import controladores.MemoryController;
import controladores.MemorySpace;
import controladores.ProcessController;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import resourceReader.Instruccion;
import resourceReader.Reader;

/**
 *
 * @author Usuario
 */
public class NewJFrame extends javax.swing.JFrame {
    static ProcessController controller = new ProcessController();
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }
    abstract class threadProcess implements Runnable {

    }
    
    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fileName = new javax.swing.JTextField();
        loadFile = new javax.swing.JButton();
        loadFileContent = new javax.swing.JButton();
        execute = new javax.swing.JButton();
        cleanOperation = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selectedMemorySize = new javax.swing.JTextField();
        setSize = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Content1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        registerAC = new javax.swing.JTextField();
        registerIR = new javax.swing.JTextField();
        registerPC = new javax.swing.JTextField();
        registerAX = new javax.swing.JTextField();
        registerBX = new javax.swing.JTextField();
        registerCX = new javax.swing.JTextField();
        registerDX = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Preparación de archivo"));

        fileName.setEditable(false);
        fileName.setName("fileName"); // NOI18N
        fileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNameActionPerformed(evt);
            }
        });

        loadFile.setText("...");
        loadFile.setEnabled(false);
        loadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileActionPerformed(evt);
            }
        });

        loadFileContent.setText("Cargar");
        loadFileContent.setEnabled(false);
        loadFileContent.setName("loadFileContent"); // NOI18N
        loadFileContent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileContentActionPerformed(evt);
            }
        });

        execute.setText("Ejecutar");
        execute.setEnabled(false);
        execute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeActionPerformed(evt);
            }
        });

        cleanOperation.setText("Limpiar");
        cleanOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanOperationActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Archivo:");

        jLabel2.setText("Definir tamaño de la memoria:");

        selectedMemorySize.setText("10");
        selectedMemorySize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedMemorySizeActionPerformed(evt);
            }
        });
        selectedMemorySize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                selectedMemorySizeKeyTyped(evt);
            }
        });

        setSize.setText("Definir tamaño");
        setSize.setToolTipText("");
        setSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(loadFileContent)
                        .addGap(18, 18, 18)
                        .addComponent(execute)
                        .addGap(18, 18, 18)
                        .addComponent(cleanOperation))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadFile)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectedMemorySize, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setSize, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(loadFile)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(execute)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(loadFileContent)
                                .addComponent(cleanOperation))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedMemorySize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setSize)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Contenido"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Content1.setEditable(false);
        Content1.setColumns(20);
        Content1.setRows(5);
        jScrollPane2.setViewportView(Content1);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 18, 260, 410));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Registros", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

        registerAC.setEditable(false);
        registerAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerACActionPerformed(evt);
            }
        });

        registerIR.setEditable(false);

        registerPC.setEditable(false);

        registerAX.setEditable(false);

        registerBX.setEditable(false);

        registerCX.setEditable(false);

        registerDX.setEditable(false);

        jLabel5.setText("AC");

        jLabel6.setText("IR");

        jLabel7.setText("PC");

        jLabel8.setText("AX");

        jLabel9.setText("BX");

        jLabel10.setText("CX");

        jLabel11.setText("DX");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(registerDX, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(registerCX, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(registerBX, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(registerAX, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(registerPC, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(registerIR, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(registerAC, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerAC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerIR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(41, 41, 41)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerAX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerBX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerCX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerDX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Memoria"));
        jPanel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Posición de memoria","Instrucción binaria"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.getAccessibleContext().setAccessibleName("Contenidos");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileActionPerformed
        Reader fileSearcher = new Reader();
        try {
            fileSearcher.getFile();
            fileName.setText(fileSearcher.getPathFile());
            Content1.setText(fileSearcher.getFileText());
            if (fileSearcher.getPathFile().equals("")) {
                JFrame f = new JFrame("frame");
                JOptionPane.showMessageDialog(f ,
                "El tipo de archivo debe ser de extensión .asm." ,
                "Tipo de archivo no valido" ,
                JOptionPane.ERROR_MESSAGE);
            } else {
                loadFileContent.setEnabled(true);
            }
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadFileActionPerformed

    private void selectedMemorySizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedMemorySizeActionPerformed
        
    }//GEN-LAST:event_selectedMemorySizeActionPerformed

    private void fileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileNameActionPerformed

    private void executeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeActionPerformed
            controller.getComputer().restart();
            controller.getMemoryController().setActual(controller.getMemoryController().getBeging());
            registerAX.setText("");
            registerBX.setText("");
            registerCX.setText("");
            registerDX.setText("");
                    
            registerAC.setText("");
            registerPC.setText("");
            registerIR.setText("");
            Thread done;
            done = new Thread( new  threadProcess() {
                public void run() {
                    for (Instruccion instruction : controller.getProgram().getInstructionList()) {
                        try {
                            Thread.sleep((1000));
                        } catch (InterruptedException e) {
                            System.err.println("se cayó");
                        }
                        view();
                        switch (instruction.getType()) {
                            case "MOV": //3
                                String instructionText =  "3 " + Integer.toString(instruction.verifyRegister()) + " " + Integer.toString(instruction.getNumber());
                                controller.getComputer().processMOV(instruction.getRegister(), Integer.toString(instruction.getNumber()),instructionText ,Integer.toString(controller.getMemoryController().getActual()));
                                break;
                            case "ADD": //5
                                String instructionText2 =  "5 " + Integer.toString(instruction.verifyRegister()) + " " + Integer.toString(instruction.getNumber());
                                controller.getComputer().processADD(instruction.getRegister(), instructionText2 ,Integer.toString(controller.getMemoryController().getActual()));
                                break;
                            case "SUB": //4
                                String instructionText3 =  "4 " + Integer.toString(instruction.verifyRegister()) + " " + Integer.toString(instruction.getNumber());
                                controller.getComputer().processSUB(instruction.getRegister(), instructionText3 ,Integer.toString(controller.getMemoryController().getActual()));
                                break;
                            case "LOAD": //1
                                String instructionText4 =  "1 " + Integer.toString(instruction.verifyRegister()) + " " + Integer.toString(instruction.getNumber());
                                controller.getComputer().processLOAD(instruction.getRegister(), instructionText4 ,Integer.toString(controller.getMemoryController().getActual()));
                                break;
                            case "STORE": //2
                                String instructionText5 =  "2 " + Integer.toString(instruction.verifyRegister()) + " " + Integer.toString(instruction.getNumber());
                                controller.getComputer().processSTORE(instruction.getRegister(), instructionText5 ,Integer.toString(controller.getMemoryController().getActual()));
                                break;
                            default:
                                System.out.println(".run()");
                                break;
                        }
                        controller.getMemoryController().setActual(controller.getMemoryController().getActual()+1);
                    }
                    try {
                            Thread.sleep((1000));
                        } catch (InterruptedException e) {
                            System.err.println("se cayó");
                        }
                    view();
                    execute.setEnabled(true);
                    cleanOperation.setEnabled(true);
                }
                
                public void view(){
                    registerAX.setText(controller.getComputer().getAX());
                    registerBX.setText(controller.getComputer().getBX());
                    registerCX.setText(controller.getComputer().getCX());
                    registerDX.setText(controller.getComputer().getDX());
                    
                    registerAC.setText(controller.getComputer().getAC());
                    registerPC.setText(controller.getComputer().getPC());
                    registerIR.setText(controller.getComputer().getIR());
                }
            },"done" );
            execute.setEnabled(false);
            cleanOperation.setEnabled(false);
            done.start(); 
    }//GEN-LAST:event_executeActionPerformed

    private void loadFileContentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileContentActionPerformed
        controller.getProgram().createLista(Content1.getText());
        List<String> errors = controller.getBinaryController().verifyErrors(controller.getProgram());
        if (errors.size() == 0) {
            if (!(controller.getProgram().getInstructionList().size() + 10 > controller.getMemoryController().getSelectMemorySize())){
                DefaultTableModel dtm = new DefaultTableModel(0, 0);
                String header[] = new String[]{"Posición de memoria","Instrucción binaria"};
                dtm.setColumnIdentifiers(header);
                jTable1.setModel(dtm);
                controller.getMemoryController().setBeging(controller.getProgram().getInstructionList().size());
                controller.getBinaryController().binaryText(controller.getProgram(),controller.getMemoryController().getBeging());
                List<MemorySpace> binaryList = controller.getBinaryController().getListOfBinaries();
                for (int i = 0; i <= controller.getMemoryController().getSelectMemorySize()-1; i++) {
                    if (i == controller.getMemoryController().getBeging()) {
                        for (MemorySpace temp: binaryList) {
                            dtm.addRow(new Object[] {String.valueOf(temp.getSpaceInMemory()), temp.getBinaryData()});
                            i++;
                        }
                    } else {
                        dtm.addRow(new Object[] {String.valueOf(i), ""});
                    }
                }
                loadFileContent.setEnabled(false);
                execute.setEnabled(true);
            } else {
                JFrame f = new JFrame("frame");
                JOptionPane.showMessageDialog(f ,
                "La cantidad de instrucciones es mayor a la memoria ajustada." ,
                "Error de memoria" ,
                JOptionPane.ERROR_MESSAGE);
            }
        } else {
            for (String error : errors) {
                JFrame f = new JFrame("frame");
                JOptionPane.showMessageDialog(f ,
                error,
                "Error en la escritura de la instrucción" ,
                JOptionPane.ERROR_MESSAGE);
            }
            //imprimir mensajes de errores
        }
    }//GEN-LAST:event_loadFileContentActionPerformed

    private void registerACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerACActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_registerACActionPerformed

    private void selectedMemorySizeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_selectedMemorySizeKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_selectedMemorySizeKeyTyped

    private void setSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSizeActionPerformed
        controller.getMemoryController().setSelectedMemorySize(Integer.parseInt(selectedMemorySize.getText()));
        loadFile.setEnabled(true);
        setSize.setEnabled(false);
    }//GEN-LAST:event_setSizeActionPerformed

    private void cleanOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanOperationActionPerformed
        selectedMemorySize.setText("10");
        fileName.setText("");
        Content1.setText("");
        
        DefaultTableModel dtm = new DefaultTableModel(0, 0);
        String header[] = new String[]{"Posición de memoria","Instrucción binaria"};
        dtm.setColumnIdentifiers(header);
        jTable1.setModel(dtm);
        
        registerAC.setText("");
        registerIR.setText("");
        registerPC.setText("");
        
        registerAX.setText("");
        registerBX.setText("");
        registerCX.setText("");
        registerDX.setText("");
        
        controller = new ProcessController();
        
        loadFile.setEnabled(false);
        setSize.setEnabled(true);
        loadFileContent.setEnabled(false);
        execute.setEnabled(false);
        cleanOperation.setEnabled(true);
        
    }//GEN-LAST:event_cleanOperationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Content1;
    private javax.swing.JButton cleanOperation;
    private javax.swing.JButton execute;
    private javax.swing.JTextField fileName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton loadFile;
    private javax.swing.JButton loadFileContent;
    private javax.swing.JTextField registerAC;
    private javax.swing.JTextField registerAX;
    private javax.swing.JTextField registerBX;
    private javax.swing.JTextField registerCX;
    private javax.swing.JTextField registerDX;
    private javax.swing.JTextField registerIR;
    private javax.swing.JTextField registerPC;
    private javax.swing.JTextField selectedMemorySize;
    private javax.swing.JButton setSize;
    // End of variables declaration//GEN-END:variables
}
